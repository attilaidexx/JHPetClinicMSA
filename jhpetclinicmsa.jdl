
/*
 * This is a microservice PetClinic sample with Gateway and two microservice applications
 * This uses JHipster registry for service discovery
 */
 
application {
  config {
    baseName visits
    applicationType gateway
    packageName com.jhipster.demo.visits
    serviceDiscoveryType eureka
    authenticationType jwt
    prodDatabaseType mysql
    cacheProvider no
    buildTool maven
    clientFramework react
    testFrameworks [cypress]
    reactive false
  }
  entities *
}

application {
  config {
    baseName vet
    applicationType microservice
    packageName com.jhipster.demo.vet
    serviceDiscoveryType eureka
    authenticationType jwt
    prodDatabaseType mysql
    buildTool maven
    serverPort 8081
    skipUserManagement true
  }
  entities Vet, Specialty, Visit
}

application {
  config {
    baseName pet
    applicationType microservice
    packageName com.jhipster.demo.pet
    serviceDiscoveryType eureka
    authenticationType jwt
    databaseType mongodb
    prodDatabaseType mongodb
    devDatabaseType mongodb
    cacheProvider no
    enableHibernateCache false
    buildTool maven
    serverPort 8082
    skipUserManagement true
  }
  entities Pet, Species, Owner, Visit
}

/* Entities for Visit Gateway */
entity Visit(visits) {
    visitDate LocalDate required
    petId Long required
    vetId Long required
    description String
}

service Visit with serviceImpl
paginate Visit with pagination


/* Entities for Pet Microservice */
entity Species(species) {
    name String required maxlength(80)
}

entity Pet(pets) {
    name String required maxlength(30)
    birthDate LocalDate
}

entity Owner(owners) {
    firstName String required maxlength(30)
    lastName String required maxlength(30)
    address String required maxlength(255)
    city String required maxlength(80)
    telephone String required maxlength(20)
}

relationship OneToMany {
  Owner{pets(name)} to Pet{owner(lastName)}
}

relationship ManyToOne {
  Pet{species(name)} to Species
}

service Species, Pet, Owner with serviceImpl
paginate Species, Pet, Owner with pagination
microservice Species, Pet, Owner with pet




/* Entities for Vet Microservice */
entity Specialty(specialties) {
    name String required maxlength(80)
}

entity Vet(vets) {
    firstName String required maxlength(30)
    lastName String required maxlength(30)
}

relationship ManyToMany{
    Vet{specialties(name)} to Specialty{vets}
}

service Vet, Specialty with serviceImpl
paginate Vet, Specialty with pagination
microservice Vet, Specialty with pet
